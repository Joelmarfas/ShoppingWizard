numericos %>%
melt %>%
ggplot(aes(x = value)) +
stat_density() +
facet_wrap(~variable, scales = "free")
no_numericos <- datos %>% dplyr::select(!is.numeric)
View(no_numericos)
sapply(datos, function(x) length(unique(x)))
dim(datos)
library(rpart)
library(MASS)
library(caret)
library(ranger)
smp_size <- floor(0.75 * nrow(datos))
set.seed(123)
entrenamiento_ind <- sample(seq_len(nrow(datos)), size = smp_size)
entrenamiento <- datos[entrenamiento_ind, ]
validacion <- datos[-entrenamiento_ind, ]
summary(datos)
modelo_total_dt <- rpart(BikeBuyerText ~., data = entrenamiento)
BikeBuyer <- as.factor(datos$BikeBuyer)
modelo_total_rf <- ranger(BikeBuyer~., data = entrenamiento, importance = "impurity")
library(readxl)
library(tidyverse)
direccion_archivo <- "/Users/josevalenzuela/OneDrive/UNIR/Asignaturas/Complementarias/Power BI/Semestre 2/Práctica/AWcustomersandsales.xlsx"
datos <- read_excel(direccion_archivo)
view(datos)
datos <- datos %>%
mutate_if(is.character, funs(replace(.,.=="NULL", NA)))
ncol(datos)
all_na <- function(x) any(!is.na(x))
datos <- datos %>% select_if(all_na)
nrow(datos)
datos <- datos[,colSums(!is.na(datos))>=9177]
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
datos <- datos %>%
mutate_if(is.numeric, funs(replace(.,is.na(.), mean(., na.rm = TRUE)))) %>%
mutate_if(is.factor, funs(replace(.,is.na(.), Mode(na.omit(.))))) %>%
mutate_if(is.character, funs(replace(.,is.na(.), Mode(na.omit(.)))))
ind <- sapply(datos, is.numeric)
datos[ind] <- lapply(datos[ind], scale)
library(Hmisc)
datos$AvgMonthSpend_cat <- cut(datos$AvgMonthSpend, g=5)
no_numericos <- datos %>% dplyr::select(!is.numeric)
sapply(no_numericos, function(x) length(unique(x)))
dim(datos)
datos$CustomerID <- NULL
datos$FirstName <- NULL
datos$MiddleName <- NULL
datos$LastName <- NULL
datos$AddressLine1 <- NULL
datos$AddressLine2 <- NULL
datos$PhoneNumber <- NULL
datos$LastUpdated <- NULL
sapply(datos, function(x) length(unique(x)))
library(fastDummies)
datos <- datos %>%
dummy_cols(select_columns = c("Education","Occupation","Gender","MaritalStatus","AvgMonthSpend_cat"))
datos$Education <- NULL
datos$Occupation <- NULL
datos$Gender <- NULL
datos$MaritalStatus <- NULL
datos$AvgMonthSpend_cat <- NULL
datos$BikeBuyer <- NULL
prop.table(table(datos$BikeBuyerText))*100
datos <- as.data.frame(unclass(datos))
library(ggcorrplot)
numericos <- datos %>% dplyr::select(is.numeric)
corr <- cor(numericos)
ggcorrplot(corr, hc.order = TRUE, type = "lower", lab = TRUE, lab_size = 2,tl.cex = 9)
require(reshape2)
numericos %>%
melt %>%
ggplot(aes(x = value)) +
stat_density() +
facet_wrap(~variable, scales = "free")
no_numericos <- datos %>% dplyr::select(!is.numeric)
View(no_numericos)
sapply(datos, function(x) length(unique(x)))
dim(datos)
library(rpart)
library(MASS)
library(caret)
library(ranger)
smp_size <- floor(0.75 * nrow(datos))
set.seed(123)
entrenamiento_ind <- sample(seq_len(nrow(datos)), size = smp_size)
entrenamiento <- datos[entrenamiento_ind, ]
validacion <- datos[-entrenamiento_ind, ]
summary(datos)
modelo_total_dt <- rpart(BikeBuyerText ~., data = entrenamiento)
modelo_total_rf <- ranger(BikeBuyer~., data = entrenamiento, importance = "impurity")
BikeBuyer <- datos$BikeBuyer
modelo_total_rf <- ranger(BikeBuyer~., data = entrenamiento, importance = "impurity")
modelo_total_glm <- glm(BikeBuyer ~., data = entrenamiento %>% dplyr::select(-City,-StateProvinceName,-PostalCode), family = "binomial")
entrenamiento_ind <- sample(seq_len(nrow(datos)), size = smp_size)
set.seed(123)
smp_size <- floor(0.75 * nrow(datos))
set.seed(123)
entrenamiento_ind <- sample(seq_len(nrow(datos)), size = smp_size)
entrenamiento <- datos[entrenamiento_ind, ]
validacion <- datos[-entrenamiento_ind, ]
modelo_total_dt <- rpart(BikeBuyerText ~., data = entrenamiento)
modelo_total_rf <- ranger(BikeBuyer~., data = entrenamiento, importance = "impurity")
modelo_total_rf <- ranger(BikeBuyer~., data = entrenamiento)
modelo_total_dt <- rpart(BikeBuyerText ~., data = entrenamiento)
modelo_total_dt <- rpart(BikeBuyerText ~., data = entrenamiento)
modelo_total_rf <- ranger(BikeBuyerText~., data = entrenamiento, importance = "impurity")
View(entrenamiento)
sapply(datos, function(x) length(unique(x)))
dim(datos)
smp_size <- floor(0.75 * nrow(datos))
set.seed(123)
entrenamiento_ind <- sample(seq_len(nrow(datos)), size = smp_size)
entrenamiento <- datos[entrenamiento_ind, ]
validacion <- datos[-entrenamiento_ind, ]
modelo_total_dt <- rpart(BikeBuyerText ~., data = entrenamiento)
modelo_total_rf <- ranger(BikeBuyer~., data = entrenamiento, importance = "impurity")
modelo_total_rf <- ranger(datos$BikeBuyerText~., data = entrenamiento, importance = "impurity")
modelo_total_rf <- ranger(datos$BikeBuyerText~., data = entrenamiento, importance = "impurity")
modelo_total_rf <- ranger(datos$BikeBuyer~., data = entrenamiento, importance = "impurity")
modelo_total_rf <- ranger(BikeBuyerText~., data = entrenamiento, importance = "impurity")
modelo_total_rf <- ranger(BikeBuyer~., data = entrenamiento, importance = "impurity")
as.factor(datos$BikeBuyer)
smp_size <- floor(0.75 * nrow(datos))
set.seed(123)
entrenamiento_ind <- sample(seq_len(nrow(datos)), size = smp_size)
entrenamiento <- datos[entrenamiento_ind, ]
validacion <- datos[-entrenamiento_ind, ]
modelo_total_dt <- rpart(BikeBuyerText ~., data = entrenamiento)
modelo_total_rf <- ranger(BikeBuyer~., data = entrenamiento, importance = "impurity")
library(readxl)
library(tidyverse)
direccion_archivo <- "/Users/josevalenzuela/OneDrive/UNIR/Asignaturas/Complementarias/Power BI/Semestre 2/Práctica/AWcustomersandsales.xlsx"
datos <- read_excel(direccion_archivo)
view(datos)
datos <- datos %>%
mutate_if(is.character, funs(replace(.,.=="NULL", NA)))
ncol(datos)
all_na <- function(x) any(!is.na(x))
datos <- datos %>% select_if(all_na)
nrow(datos)
datos <- datos[,colSums(!is.na(datos))>=9177]
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
datos <- datos %>%
mutate_if(is.numeric, funs(replace(.,is.na(.), mean(., na.rm = TRUE)))) %>%
mutate_if(is.factor, funs(replace(.,is.na(.), Mode(na.omit(.))))) %>%
mutate_if(is.character, funs(replace(.,is.na(.), Mode(na.omit(.)))))
ind <- sapply(datos, is.numeric)
datos[ind] <- lapply(datos[ind], scale)
library(Hmisc)
datos$AvgMonthSpend_cat <- cut(datos$AvgMonthSpend, g=5)
no_numericos <- datos %>% dplyr::select(!is.numeric)
sapply(no_numericos, function(x) length(unique(x)))
dim(datos)
datos$CustomerID <- NULL
datos$FirstName <- NULL
datos$MiddleName <- NULL
datos$LastName <- NULL
datos$AddressLine1 <- NULL
datos$AddressLine2 <- NULL
datos$PhoneNumber <- NULL
datos$LastUpdated <- NULL
sapply(datos, function(x) length(unique(x)))
library(fastDummies)
datos <- datos %>%
dummy_cols(select_columns = c("Education","Occupation","Gender","MaritalStatus","AvgMonthSpend_cat"))
datos$Education <- NULL
datos$Occupation <- NULL
datos$Gender <- NULL
datos$MaritalStatus <- NULL
datos$AvgMonthSpend_cat <- NULL
datos$BikeBuyer <- NULL
prop.table(table(datos$BikeBuyerText))*100
datos <- as.data.frame(unclass(datos))
library(ggcorrplot)
numericos <- datos %>% dplyr::select(is.numeric)
corr <- cor(numericos)
ggcorrplot(corr, hc.order = TRUE, type = "lower", lab = TRUE, lab_size = 2,tl.cex = 9)
require(reshape2)
numericos %>%
melt %>%
ggplot(aes(x = value)) +
stat_density() +
facet_wrap(~variable, scales = "free")
no_numericos <- datos %>% dplyr::select(!is.numeric)
View(no_numericos)
sapply(datos, function(x) length(unique(x)))
dim(datos)
as.factor(datos$BikeBuyer)
library(rpart)
library(MASS)
library(caret)
library(ranger)
smp_size <- floor(0.75 * nrow(datos))
set.seed(123)
entrenamiento_ind <- sample(seq_len(nrow(datos)), size = smp_size)
entrenamiento <- datos[entrenamiento_ind, ]
validacion <- datos[-entrenamiento_ind, ]
modelo_total_dt <- rpart(BikeBuyerText ~., data = entrenamiento)
modelo_total_rf <- ranger(BikeBuyer~., data = entrenamiento, importance = "impurity")
view(datos)
class(variable)
view(BikeBuyer)
view(BikeBuyerText)
library(rpart)
view(BikeBuyerText)
modelo_total_dt <- rpart(BikeBuyerText ~., data = entrenamiento)
modelo_total_rf <- ranger(BikeBuyer~., data = entrenamiento, importance = "impurity")
modelo_total_rf <- ranger(BikeBuyerText~., data = entrenamiento, importance = "impurity")
modelo_total_dt <- rpart(BikeBuyerText ~., data = entrenamiento)
modelo_total_glm <- glm(BikeBuyer~., data = entrenamiento %>% dplyr::select(-City,-StateProvinceName,-PostalCode), family = "binomial")
modelo_total_glm <- glm(BikeBuyerText~., data = entrenamiento %>% dplyr::select(-City,-StateProvinceName,-PostalCode), family = "binomial")
modelo_total_glm <- glm(BikeBuyer~., data = entrenamiento %>% dplyr::select(-City,-StateProvinceName,-PostalCode), family = "binomial")
datos$Title <- NULL
datos$Suffix <- NULL
datos$BirthDate <- NULL
datos$LastUpdated <- NULL
datos$CustomerID <- NULL
datos$FirstName <- NULL
datos$MiddleName <- NULL
datos$LastName <- NULL
datos$AddressLine1 <- NULL
datos$AddressLine2 <- NULL
datos$PhoneNumber <- NULL
datos$LastUpdated <- NULL
datos$Education <- NULL
datos$Occupation <- NULL
datos$Gender <- NULL
datos$MaritalStatus <- NULL
datos$AvgMonthSpend_cat <- NULL
datos$LatePayment <- NULL
datos$City <- NULL
datos$StateProvinceName <- NULL
datos$PostalCode <- NULL
datos$LatePaymentText <- as.factor(datos$LatePaymentText)
datos$AvgMonthSpend <- as.numeric(datos$AvgMonthSpend)
datos <- as.data.frame(unclass(datos))
datos$BikeBuyerText <- as.factor(datos$LatePaymentText)
datos$BikeBuyerText <- as.factor(datos$BikeBuyerText)
datos <- as.data.frame(unclass(datos))
smp_size <- floor(0.75 * nrow(datos))
set.seed(123)
entrenamiento_ind <- sample(seq_len(nrow(datos)), size = smp_size)
entrenamiento <- datos[entrenamiento_ind, ]
validacion <- datos[-entrenamiento_ind, ]
modelo_total_dt <- rpart(BikeBuyerText ~., data = entrenamiento)
modelo_total_rf <- ranger(BikeBuyerText~., data = entrenamiento, importance = "impurity")
modelo_total_glm <- glm(BikeBuyerText~., data = entrenamiento %>% dplyr::select(-City,-StateProvinceName,-PostalCode), family = "binomial")
modelo_total_glm <- glm(BikeBuyerText~., data = entrenamiento, family = "binomial")
summary(modelo_total_glm)
coef(modelo_total_glm)
barplot(abs(coef(modelo_total_glm))%>%sort(),las=2)
barplot(abs(coef(modelo_total_glm))%>%sort(),las=1)
barplot(abs(coef(modelo_total_glm))%>%sort(),las=1.25)
barplot(abs(coef(modelo_total_glm))%>%sort(),las=1.75)
barplot(abs(coef(modelo_total_glm))%>%sort(),las=2)
barplot(abs(coef(modelo_total_glm))%>%sort(),las=2)
barplot(abs(coef(modelo_total_glm))%>%sort(),facet_wrap(~variable, scales = "free")
barplot(abs(coef(modelo_total_glm))%>%sort(),facet_wrap(~variable, scales = "1/2")
summary(modelo_total_glm)
coef(modelo_total_glm)
barplot(abs(coef(modelo_total_glm))%>%sort(),facet_wrap(~variable, scales = "1/2")
barplot(abs(coef(modelo_total_glm))%>%sort(),las=3)
barplot(abs(coef(modelo_total_glm))%>%sort(),las=3)
barplot(abs(coef(modelo_total_glm))%>%sort(),las=5)
barplot(abs(coef(modelo_total_glm))%>%sort(),las=4)
barplot(abs(coef(modelo_total_glm))%>%sort(),las=3)
barplot(abs(coef(modelo_total_glm))%>%sort(),las=2)
library(rpart.plot)
summary(modelo_total_dt)
result_varimp_dt <- varImp(modelo_total_dt) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
filter(Overall>0)
barplot(modelo_total_dt$variable.importance,las=2)
barplot(modelo_total_dt$variable.importance,las=3)
barplot(abs(coef(modelo_total_glm))%>%sort(),las=2)
rpart.plot(modelo_total_dt)
library(rattle)
fancyRpartPlot(modelo_total_dt, type = 4)
summary(modelo_total_rf)
modelo_total_rf$variable.importance %>% sort() %>%
as.data.frame() %>%
View()
barplot(modelo_total_rf$variable.importance%>% sort(),las=2)
barplot(modelo_total_rf$variable.importance%>% sort(),las=2)
probab_glm <- modelo_total_glm %>% predict(validacion%>% dplyr::select(-City,-StateProvinceName,-PostalCode), type = "response") %>% round()
probab_glm <- modelo_total_glm %>% predict(validacion%>% dplyr::select(City,-StateProvinceName,-PostalCode), type = "response") %>% round()
pred_glm <- ifelse(probab_glm > 0.5, "YES", "NO")
probab_glm <- modelo_total_glm %>% predict(validacion%>% dplyr::select(-StateProvinceName,-PostalCode), type = "response") %>% round()
probab_glm <- modelo_total_glm %>% predict(validacion, type = "response") %>% round()
pred_glm <- ifelse(probab_glm > 0.5, "YES", "NO")
pred_dt <- predict(modelo_total_dt, validacion, type = "class")
pred_rf <- predict(modelo_total_rf, validacion, type = "response")
library(MLmetrics)
table(pred_glm, validacion$BikeBuyerText)
ConfusionMatrix(pred_glm, validacion$BikeBuyerText)
Sensitivity(pred_glm, validacion$BikeBuyerText)
Specificity(pred_glm, validacion$BikeBuyerText)
rsq.rpart(modelo_total_dt)
printcp_result <- printcp(modelo_total_dt)
rsq.val <- 1-printcp_result[,c(3,4)]
print(rsq.val)
ConfusionMatrix(pred_dt, validacion$BikeBuyerText)
Sensitivity(pred_dt, validacion$BikeBuyerText)
Specificity(pred_dt, validacion$BikeBuyerText)
ConfusionMatrix(pred_rf$predictions, validacion$BikeBuyerText)
Sensitivity(pred_rf$predictions, validacion$BikeBuyerText)
Specificity(pred_rf$predictions, validacion$BikeBuyerText)
smp_size <- floor(0.75 * nrow(datos))
set.seed(123)
entrenamiento_ind <- sample(seq_len(nrow(datos)), size = smp_size)
entrenamiento <- datos[entrenamiento_ind, ]
validacion <- datos[-entrenamiento_ind, ]
modelo_total_dt <- rpart(BikeBuyerText ~., data = entrenamiento)
modelo_total_rf <- ranger(BikeBuyerText~., data = entrenamiento, importance = "impurity")
modelo_total_glm <- glm(BikeBuyerText~., data = entrenamiento, family = "binomial")
summary(modelo_total_glm)
coef(modelo_total_glm)
barplot(abs(coef(modelo_total_glm))%>%sort(),las=2)
library(rpart.plot)
summary(modelo_total_dt)
result_varimp_dt <- varImp(modelo_total_dt) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
filter(Overall>0)
barplot(modelo_total_dt$variable.importance,las=3)
rpart.plot(modelo_total_dt)
library(rattle)
rpart.plot(modelo_total_dt)
library(rattle)
fancyRpartPlot(modelo_total_dt, type = 4)
summary(modelo_total_rf)
modelo_total_rf$variable.importance %>% sort() %>%
as.data.frame() %>%
View()
barplot(modelo_total_rf$variable.importance%>% sort(),las=2)
probab_glm <- modelo_total_glm %>% predict(validacion, type = "response") %>% round()
pred_glm <- ifelse(probab_glm > 0.5, "YES", "NO")
pred_dt <- predict(modelo_total_dt, validacion, type = "class")
pred_rf <- predict(modelo_total_rf, validacion, type = "response")
library(MLmetrics)
table(pred_glm, validacion$BikeBuyerText)
ConfusionMatrix(pred_glm, validacion$BikeBuyerText)
Sensitivity(pred_glm, validacion$BikeBuyerText)
Specificity(pred_glm, validacion$BikeBuyerText)
rsq.rpart(modelo_total_dt)
printcp_result <- printcp(modelo_total_dt)
rsq.val <- 1-printcp_result[,c(3,4)]
print(rsq.val)
ConfusionMatrix(pred_dt, validacion$BikeBuyerText)
Sensitivity(pred_dt, validacion$BikeBuyerText)
Specificity(pred_dt, validacion$BikeBuyerText)
ConfusionMatrix(pred_rf$predictions, validacion$BikeBuyerText)
Sensitivity(pred_rf$predictions, validacion$BikeBuyerText)
Specificity(pred_rf$predictions, validacion$BikeBuyerText)
plot(pred_dt, validacion&BikeBuyerText)
plot(pred_dt, validacion$BikeBuyerText)
plot(pred_glm, validacion$BikeBuyerText)
Specificity(pred_glm, validacion$BikeBuyerText)
table(pred_glm, validacion$BikeBuyerText)
ConfusionMatrix(pred_glm, validacion$BikeBuyerText)
plot(pred_glm, validacion$BikeBuyerText)
ConfusionMatrix(pred_glm, validacion$BikeBuyerText)
ConfusionMatrix1(pred_glm, validacion$BikeBuyerText)
plot(ConfusionMatrix)
plot(pred_glm, validacion$BikeBuyerText)
table(pred_glm, validacion$BikeBuyerText)
ConfusionMatrix(pred_glm, validacion$BikeBuyerText)
Sensitivity(pred_glm, validacion$BikeBuyerText)
Specificity(pred_glm, validacion$BikeBuyerText)
rsq.rpart(modelo_total_dt)
printcp_result <- printcp(modelo_total_dt)
rsq.val <- 1-printcp_result[,c(3,4)]
print(rsq.val)
ConfusionMatrix(pred_dt, validacion$BikeBuyerText)
Sensitivity(pred_dt, validacion$BikeBuyerText)
Specificity(pred_dt, validacion$BikeBuyerText)
plot(pred_glm, validacion$BikeBuyerText)
plot(pred_dt, validacion$BikeBuyerText)
plot(pred_rf, validacion$BikeBuyerText)
ConfusionMatrix(pred_rf$predictions, validacion$BikeBuyerText)
Sensitivity(pred_rf$predictions, validacion$BikeBuyerText)
Specificity(pred_rf$predictions, validacion$BikeBuyerText)
plot(pred_rf, validacion$BikeBuyerText)
plot(pred_rf$predictions, validacion$BikeBuyerText)
plot(pred_glm, validacion$BikeBuyerText)
plot(pred_glm, validacion$BikeBuyerText)
# modelo2
pred_dt <- predict(modelo_total_dt, validacion, type = "class")
# modelo3
pred_rf <- predict(modelo_total_rf, validacion, type = "response")
######## EVALUACION
# modelo1
ConfusionMatrix(pred_glm, validacion$BikeBuyerText)
# modelo2
ConfusionMatrix(pred_dt, validacion$BikeBuyerText)
# modelo3
ConfusionMatrix(pred_rf$predictions, validacion$BikeBuyerText)
plot(pred_glm, validacion$BikeBuyerText)
pairs(dataset[, sapply(dataset, function(col) length(unique(col))) > 2])
#Así se carga el archivo necesario y eliminamos los "NULL"
dataset <- read_excel("/Users/josevalenzuela/OneDrive/UNIR/Asignaturas/Complementarias/Power BI/Semestre 2/Práctica/AWcustomersandsales.xlsx", na = "NULL")
#Así se carga el plugin correspondiente
library(readxl)
#Así se carga el archivo necesario y eliminamos los "NULL"
dataset <- read_excel("/Users/josevalenzuela/OneDrive/UNIR/Asignaturas/Complementarias/Power BI/Semestre 2/Práctica/AWcustomersandsales.xlsx", na = "NULL")
pairs(dataset[, sapply(dataset, function(col) length(unique(col))) > 2])
unique(dataset$am)
hist(dataset$am)
cormat <- dataset[,-1] %>% cor()
#
# Esta gráfica muestra la densidad de clientes que ha comprado una bicicleta según nivel de estudios
dataset %>%
filter( BikeBuyer==1 ) %>%
ggplot( aes(x=Education)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
library(readxl)
#Así se carga el archivo necesario y eliminamos los "NULL"
dataset <- read_excel("/Users/josevalenzuela/OneDrive/UNIR/Asignaturas/Complementarias/Power BI/Semestre 2/Práctica/AWcustomersandsales.xlsx", na = "NULL")
#Así se ven los datos
View(dataset)
#Así se ve el resumen y comprobamos que no hay valores "NULL"
summary(dataset)
# TEXTO "NULL" QUE DEBERIA SER NULL(numero que significa vac?o)
library(tidyverse)
datos$Title <- NULL
datos$Suffix <- NULL
datos$BirthDate <- NULL
datos$LastUpdated <- NULL
datos$CustomerID <- NULL
datos$FirstName <- NULL
datos$MiddleName <- NULL
datos$LastName <- NULL
datos$AddressLine1 <- NULL
datos$AddressLine2 <- NULL
datos$PhoneNumber <- NULL
datos$LastUpdated <- NULL
datos$Education <- NULL
datos$Occupation <- NULL
datos$Gender <- NULL
datos$MaritalStatus <- NULL
datos$AvgMonthSpend_cat <- NULL
datos$LatePayment <- NULL
datos$City <- NULL
datos$StateProvinceName <- NULL
datos$PostalCode <- NULL
datos$BikeBuyerText <- as.factor(datos$BikeBuyerText)
datos$AvgMonthSpend <- as.numeric(datos$AvgMonthSpend)
datos <- as.data.frame(unclass(datos))
# Es una forma alternativa de limpiar todo el documento a la vez
datos5 <- dataset %>%
mutate_if(is.character(, funs(replace(.,.=="NULL", NA))))
# Esta es otra alternativa
ncol(dataset)
datos <- dataset %>% select_if((all_na)
# Eliminar columnas con mas de N valores faltantes
nrow(dataset)
datos <- dataset[,colSums(!is.na(dataset))>=9177]
# la mitad de missings
numericos <-- dataset %>% select(is.numeric)
texto <-- dataset %>% select(is.character)
# Transformar datos en númericos
dataset$PostalCode <- as.numeric(dataset$PostalCode)
dataset$AvgMonthSpend <- as.numeric(dataset$AvgMonthSpend)
# Transformar columna fecha de nacimiento por edad
library(lubridate)
dataset$Años <- year(dataset$BirthDate)
# Abrimos una columna nueva para gasto medio anual
dataset$columnanueva <- dataset$AvgMonthSpend * 12
class(dataset$columnanueva)
names(dataset)[names(dataset)=="columnanueva"]="AvgYearlySpend"
# Instalamos las diferentes librerias
# ...Las cargamos
library("tidyverse")
library("ggcorrplot")
library("knitr")
library("ggplot2")
library("GGally")
library("summarytools")
library("lmtest")
library("car")
library("caret")
library("maps")
library("geom_text")
library("dplyr")
library("mlbench")
library("glm.predict")
library("rpart")
library("MASS")
library("caret")
library("ranger")
#Así se ven los datos
View(dataset)
# Esta gráfica muestra la densidad de clientes que ha comprado una bicicleta según si tienen o no tienen una bandera. Se podría decir que mostrar una bandera en un anuncio nos acercaría a nuestro targe e incrementaría las opciones de CTA.
dataset %>%
filter( BikeBuyer==1 ) %>%
ggplot( aes(x=TotalChildren)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
plot(pred_rf$predictions, validacion$BikeBuyerText)
######## EVALUACION
# modelo1
ConfusionMatrix(pred_glm, validacion$BikeBuyerText)
ConfusionMatrix(pred_rf$predictions, validacion$BikeBuyerText)
plot(pred_rf$predictions, validacion$BikeBuyerText)
